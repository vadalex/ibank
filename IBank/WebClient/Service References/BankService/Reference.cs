//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebClient.BankService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BankAccount", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class BankAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AcountNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double BalanceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BankAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AcountNumber {
            get {
                return this.AcountNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.AcountNumberField, value) != true)) {
                    this.AcountNumberField = value;
                    this.RaisePropertyChanged("AcountNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Balance {
            get {
                return this.BalanceField;
            }
            set {
                if ((this.BalanceField.Equals(value) != true)) {
                    this.BalanceField = value;
                    this.RaisePropertyChanged("Balance");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BankAccountID {
            get {
                return this.BankAccountIDField;
            }
            set {
                if ((this.BankAccountIDField.Equals(value) != true)) {
                    this.BankAccountIDField = value;
                    this.RaisePropertyChanged("BankAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrencyID {
            get {
                return this.CurrencyIDField;
            }
            set {
                if ((this.CurrencyIDField.Equals(value) != true)) {
                    this.CurrencyIDField = value;
                    this.RaisePropertyChanged("CurrencyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CardAccount", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class CardAccount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BankAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CardTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ExpiredDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDefaultField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsLockedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string StatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BankAccountID {
            get {
                return this.BankAccountIDField;
            }
            set {
                if ((this.BankAccountIDField.Equals(value) != true)) {
                    this.BankAccountIDField = value;
                    this.RaisePropertyChanged("BankAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardAccountID {
            get {
                return this.CardAccountIDField;
            }
            set {
                if ((this.CardAccountIDField.Equals(value) != true)) {
                    this.CardAccountIDField = value;
                    this.RaisePropertyChanged("CardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardNumber {
            get {
                return this.CardNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.CardNumberField, value) != true)) {
                    this.CardNumberField = value;
                    this.RaisePropertyChanged("CardNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CardType {
            get {
                return this.CardTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.CardTypeField, value) != true)) {
                    this.CardTypeField = value;
                    this.RaisePropertyChanged("CardType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ExpiredDate {
            get {
                return this.ExpiredDateField;
            }
            set {
                if ((this.ExpiredDateField.Equals(value) != true)) {
                    this.ExpiredDateField = value;
                    this.RaisePropertyChanged("ExpiredDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDefault {
            get {
                return this.IsDefaultField;
            }
            set {
                if ((this.IsDefaultField.Equals(value) != true)) {
                    this.IsDefaultField = value;
                    this.RaisePropertyChanged("IsDefault");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsLocked {
            get {
                return this.IsLockedField;
            }
            set {
                if ((this.IsLockedField.Equals(value) != true)) {
                    this.IsLockedField = value;
                    this.RaisePropertyChanged("IsLocked");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Status {
            get {
                return this.StatusField;
            }
            set {
                if ((object.ReferenceEquals(this.StatusField, value) != true)) {
                    this.StatusField = value;
                    this.RaisePropertyChanged("Status");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Employee", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class Employee : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int EmployeeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsAdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EmployeeID {
            get {
                return this.EmployeeIDField;
            }
            set {
                if ((this.EmployeeIDField.Equals(value) != true)) {
                    this.EmployeeIDField = value;
                    this.RaisePropertyChanged("EmployeeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAdmin {
            get {
                return this.IsAdminField;
            }
            set {
                if ((this.IsAdminField.Equals(value) != true)) {
                    this.IsAdminField = value;
                    this.RaisePropertyChanged("IsAdmin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Currency", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class Currency : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CurrencyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double RateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CurrencyID {
            get {
                return this.CurrencyIDField;
            }
            set {
                if ((this.CurrencyIDField.Equals(value) != true)) {
                    this.CurrencyIDField = value;
                    this.RaisePropertyChanged("CurrencyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Rate {
            get {
                return this.RateField;
            }
            set {
                if ((this.RateField.Equals(value) != true)) {
                    this.RateField = value;
                    this.RaisePropertyChanged("Rate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortName {
            get {
                return this.ShortNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortNameField, value) != true)) {
                    this.ShortNameField = value;
                    this.RaisePropertyChanged("ShortName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ArbitraryTransaction", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class ArbitraryTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ArbitraryTransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BankCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecipientField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RecipientAccountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TargetField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebClient.BankService.PaymentType TypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UNPField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ArbitraryTransactionID {
            get {
                return this.ArbitraryTransactionIDField;
            }
            set {
                if ((this.ArbitraryTransactionIDField.Equals(value) != true)) {
                    this.ArbitraryTransactionIDField = value;
                    this.RaisePropertyChanged("ArbitraryTransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BankCode {
            get {
                return this.BankCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.BankCodeField, value) != true)) {
                    this.BankCodeField = value;
                    this.RaisePropertyChanged("BankCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardAccountID {
            get {
                return this.CardAccountIDField;
            }
            set {
                if ((this.CardAccountIDField.Equals(value) != true)) {
                    this.CardAccountIDField = value;
                    this.RaisePropertyChanged("CardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Recipient {
            get {
                return this.RecipientField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientField, value) != true)) {
                    this.RecipientField = value;
                    this.RaisePropertyChanged("Recipient");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RecipientAccount {
            get {
                return this.RecipientAccountField;
            }
            set {
                if ((object.ReferenceEquals(this.RecipientAccountField, value) != true)) {
                    this.RecipientAccountField = value;
                    this.RaisePropertyChanged("RecipientAccount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Target {
            get {
                return this.TargetField;
            }
            set {
                if ((object.ReferenceEquals(this.TargetField, value) != true)) {
                    this.TargetField = value;
                    this.RaisePropertyChanged("Target");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebClient.BankService.PaymentType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UNP {
            get {
                return this.UNPField;
            }
            set {
                if ((object.ReferenceEquals(this.UNPField, value) != true)) {
                    this.UNPField = value;
                    this.RaisePropertyChanged("UNP");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PaymentType", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    public enum PaymentType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Arbitrary = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        SSIS = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Transfer = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MobileTransaction", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class MobileTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MobileProviderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MobileTransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebClient.BankService.PaymentType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardAccountID {
            get {
                return this.CardAccountIDField;
            }
            set {
                if ((this.CardAccountIDField.Equals(value) != true)) {
                    this.CardAccountIDField = value;
                    this.RaisePropertyChanged("CardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MobileProvider {
            get {
                return this.MobileProviderField;
            }
            set {
                if ((object.ReferenceEquals(this.MobileProviderField, value) != true)) {
                    this.MobileProviderField = value;
                    this.RaisePropertyChanged("MobileProvider");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MobileTransactionID {
            get {
                return this.MobileTransactionIDField;
            }
            set {
                if ((this.MobileTransactionIDField.Equals(value) != true)) {
                    this.MobileTransactionIDField = value;
                    this.RaisePropertyChanged("MobileTransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebClient.BankService.PaymentType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TransferTransaction", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class TransferTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TargetCardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TransferTransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebClient.BankService.PaymentType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardAccountID {
            get {
                return this.CardAccountIDField;
            }
            set {
                if ((this.CardAccountIDField.Equals(value) != true)) {
                    this.CardAccountIDField = value;
                    this.RaisePropertyChanged("CardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TargetCardAccountID {
            get {
                return this.TargetCardAccountIDField;
            }
            set {
                if ((this.TargetCardAccountIDField.Equals(value) != true)) {
                    this.TargetCardAccountIDField = value;
                    this.RaisePropertyChanged("TargetCardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TransferTransactionID {
            get {
                return this.TransferTransactionIDField;
            }
            set {
                if ((this.TransferTransactionIDField.Equals(value) != true)) {
                    this.TransferTransactionIDField = value;
                    this.RaisePropertyChanged("TransferTransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebClient.BankService.PaymentType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SSISTransaction", Namespace="http://schemas.datacontract.org/2004/07/BankEntities")]
    [System.SerializableAttribute()]
    public partial class SSISTransaction : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double AmountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CardAccountIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CustomerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SSISPaymentIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SSISTransactionIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebClient.BankService.PaymentType TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Amount {
            get {
                return this.AmountField;
            }
            set {
                if ((this.AmountField.Equals(value) != true)) {
                    this.AmountField = value;
                    this.RaisePropertyChanged("Amount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CardAccountID {
            get {
                return this.CardAccountIDField;
            }
            set {
                if ((this.CardAccountIDField.Equals(value) != true)) {
                    this.CardAccountIDField = value;
                    this.RaisePropertyChanged("CardAccountID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CustomerID {
            get {
                return this.CustomerIDField;
            }
            set {
                if ((this.CustomerIDField.Equals(value) != true)) {
                    this.CustomerIDField = value;
                    this.RaisePropertyChanged("CustomerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Number {
            get {
                return this.NumberField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberField, value) != true)) {
                    this.NumberField = value;
                    this.RaisePropertyChanged("Number");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SSISPaymentID {
            get {
                return this.SSISPaymentIDField;
            }
            set {
                if ((this.SSISPaymentIDField.Equals(value) != true)) {
                    this.SSISPaymentIDField = value;
                    this.RaisePropertyChanged("SSISPaymentID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SSISTransactionID {
            get {
                return this.SSISTransactionIDField;
            }
            set {
                if ((this.SSISTransactionIDField.Equals(value) != true)) {
                    this.SSISTransactionIDField = value;
                    this.RaisePropertyChanged("SSISTransactionID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebClient.BankService.PaymentType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="BankService.IBankService")]
    public interface IBankService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountById", ReplyAction="http://tempuri.org/IBankService/GetBankAccountByIdResponse")]
        WebClient.BankService.BankAccount GetBankAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountById", ReplyAction="http://tempuri.org/IBankService/GetBankAccountByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.BankAccount> GetBankAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountByNumber", ReplyAction="http://tempuri.org/IBankService/GetBankAccountByNumberResponse")]
        WebClient.BankService.BankAccount GetBankAccountByNumber(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountByNumber", ReplyAction="http://tempuri.org/IBankService/GetBankAccountByNumberResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.BankAccount> GetBankAccountByNumberAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetAllBankAccountsResponse")]
        WebClient.BankService.BankAccount[] GetAllBankAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetAllBankAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetAllBankAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddBankAccount", ReplyAction="http://tempuri.org/IBankService/AddBankAccountResponse")]
        void AddBankAccount(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddBankAccount", ReplyAction="http://tempuri.org/IBankService/AddBankAccountResponse")]
        System.Threading.Tasks.Task AddBankAccountAsync(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateBankAccount", ReplyAction="http://tempuri.org/IBankService/UpdateBankAccountResponse")]
        void UpdateBankAccount(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateBankAccount", ReplyAction="http://tempuri.org/IBankService/UpdateBankAccountResponse")]
        System.Threading.Tasks.Task UpdateBankAccountAsync(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveBankAccount", ReplyAction="http://tempuri.org/IBankService/RemoveBankAccountResponse")]
        void RemoveBankAccount(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveBankAccount", ReplyAction="http://tempuri.org/IBankService/RemoveBankAccountResponse")]
        System.Threading.Tasks.Task RemoveBankAccountAsync(WebClient.BankService.BankAccount bankAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountBalance", ReplyAction="http://tempuri.org/IBankService/GetBankAccountBalanceResponse")]
        double GetBankAccountBalance(int bankAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountBalance", ReplyAction="http://tempuri.org/IBankService/GetBankAccountBalanceResponse")]
        System.Threading.Tasks.Task<double> GetBankAccountBalanceAsync(int bankAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetNextBankAccountsResponse")]
        WebClient.BankService.BankAccount[] GetNextBankAccounts(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetNextBankAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetNextBankAccountsAsync(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetPrevBankAccountsResponse")]
        WebClient.BankService.BankAccount[] GetPrevBankAccounts(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevBankAccounts", ReplyAction="http://tempuri.org/IBankService/GetPrevBankAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetPrevBankAccountsAsync(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetNextCardAccountsResponse")]
        WebClient.BankService.CardAccount[] GetNextCardAccounts(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetNextCardAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetNextCardAccountsAsync(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetPrevCardAccountsResponse")]
        WebClient.BankService.CardAccount[] GetPrevCardAccounts(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetPrevCardAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetPrevCardAccountsAsync(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextOperators", ReplyAction="http://tempuri.org/IBankService/GetNextOperatorsResponse")]
        WebClient.BankService.Employee[] GetNextOperators(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetNextOperators", ReplyAction="http://tempuri.org/IBankService/GetNextOperatorsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetNextOperatorsAsync(int lastElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevOperators", ReplyAction="http://tempuri.org/IBankService/GetPrevOperatorsResponse")]
        WebClient.BankService.Employee[] GetPrevOperators(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetPrevOperators", ReplyAction="http://tempuri.org/IBankService/GetPrevOperatorsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetPrevOperatorsAsync(int firstElementId, int ammount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountById", ReplyAction="http://tempuri.org/IBankService/GetCardAccountByIdResponse")]
        WebClient.BankService.CardAccount GetCardAccountById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountById", ReplyAction="http://tempuri.org/IBankService/GetCardAccountByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount> GetCardAccountByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountByNumber", ReplyAction="http://tempuri.org/IBankService/GetCardAccountByNumberResponse")]
        WebClient.BankService.CardAccount GetCardAccountByNumber(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountByNumber", ReplyAction="http://tempuri.org/IBankService/GetCardAccountByNumberResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount> GetCardAccountByNumberAsync(string number);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetAllCardAccountsResponse")]
        WebClient.BankService.CardAccount[] GetAllCardAccounts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllCardAccounts", ReplyAction="http://tempuri.org/IBankService/GetAllCardAccountsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetAllCardAccountsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountsByCustomerId", ReplyAction="http://tempuri.org/IBankService/GetCardAccountsByCustomerIdResponse")]
        WebClient.BankService.CardAccount[] GetCardAccountsByCustomerId(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCardAccountsByCustomerId", ReplyAction="http://tempuri.org/IBankService/GetCardAccountsByCustomerIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetCardAccountsByCustomerIdAsync(int customerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddCardAccount", ReplyAction="http://tempuri.org/IBankService/AddCardAccountResponse")]
        void AddCardAccount(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddCardAccount", ReplyAction="http://tempuri.org/IBankService/AddCardAccountResponse")]
        System.Threading.Tasks.Task AddCardAccountAsync(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateCardAccount", ReplyAction="http://tempuri.org/IBankService/UpdateCardAccountResponse")]
        void UpdateCardAccount(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateCardAccount", ReplyAction="http://tempuri.org/IBankService/UpdateCardAccountResponse")]
        System.Threading.Tasks.Task UpdateCardAccountAsync(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveCardAccount", ReplyAction="http://tempuri.org/IBankService/RemoveCardAccountResponse")]
        void RemoveCardAccount(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveCardAccount", ReplyAction="http://tempuri.org/IBankService/RemoveCardAccountResponse")]
        System.Threading.Tasks.Task RemoveCardAccountAsync(WebClient.BankService.CardAccount cardAccount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/IsEnoughBalance", ReplyAction="http://tempuri.org/IBankService/IsEnoughBalanceResponse")]
        bool IsEnoughBalance(int cardAccountId, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/IsEnoughBalance", ReplyAction="http://tempuri.org/IBankService/IsEnoughBalanceResponse")]
        System.Threading.Tasks.Task<bool> IsEnoughBalanceAsync(int cardAccountId, double amount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCurrencyById", ReplyAction="http://tempuri.org/IBankService/GetCurrencyByIdResponse")]
        WebClient.BankService.Currency GetCurrencyById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetCurrencyById", ReplyAction="http://tempuri.org/IBankService/GetCurrencyByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Currency> GetCurrencyByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllCurrency", ReplyAction="http://tempuri.org/IBankService/GetAllCurrencyResponse")]
        WebClient.BankService.Currency[] GetAllCurrency();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllCurrency", ReplyAction="http://tempuri.org/IBankService/GetAllCurrencyResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Currency[]> GetAllCurrencyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddCurrency", ReplyAction="http://tempuri.org/IBankService/AddCurrencyResponse")]
        void AddCurrency(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddCurrency", ReplyAction="http://tempuri.org/IBankService/AddCurrencyResponse")]
        System.Threading.Tasks.Task AddCurrencyAsync(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateCurrency", ReplyAction="http://tempuri.org/IBankService/UpdateCurrencyResponse")]
        void UpdateCurrency(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateCurrency", ReplyAction="http://tempuri.org/IBankService/UpdateCurrencyResponse")]
        System.Threading.Tasks.Task UpdateCurrencyAsync(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveCurrency", ReplyAction="http://tempuri.org/IBankService/RemoveCurrencyResponse")]
        void RemoveCurrency(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveCurrency", ReplyAction="http://tempuri.org/IBankService/RemoveCurrencyResponse")]
        System.Threading.Tasks.Task RemoveCurrencyAsync(WebClient.BankService.Currency currency);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveAllCurrency", ReplyAction="http://tempuri.org/IBankService/RemoveAllCurrencyResponse")]
        void RemoveAllCurrency();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveAllCurrency", ReplyAction="http://tempuri.org/IBankService/RemoveAllCurrencyResponse")]
        System.Threading.Tasks.Task RemoveAllCurrencyAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountCurrencyShortString", ReplyAction="http://tempuri.org/IBankService/GetBankAccountCurrencyShortStringResponse")]
        string GetBankAccountCurrencyShortString(int bankAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetBankAccountCurrencyShortString", ReplyAction="http://tempuri.org/IBankService/GetBankAccountCurrencyShortStringResponse")]
        System.Threading.Tasks.Task<string> GetBankAccountCurrencyShortStringAsync(int bankAccountId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetEmployeeById", ReplyAction="http://tempuri.org/IBankService/GetEmployeeByIdResponse")]
        WebClient.BankService.Employee GetEmployeeById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetEmployeeById", ReplyAction="http://tempuri.org/IBankService/GetEmployeeByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee> GetEmployeeByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllEmployees", ReplyAction="http://tempuri.org/IBankService/GetAllEmployeesResponse")]
        WebClient.BankService.Employee[] GetAllEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllEmployees", ReplyAction="http://tempuri.org/IBankService/GetAllEmployeesResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetAllEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddEmployee", ReplyAction="http://tempuri.org/IBankService/AddEmployeeResponse")]
        void AddEmployee(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddEmployee", ReplyAction="http://tempuri.org/IBankService/AddEmployeeResponse")]
        System.Threading.Tasks.Task AddEmployeeAsync(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateEmployee", ReplyAction="http://tempuri.org/IBankService/UpdateEmployeeResponse")]
        void UpdateEmployee(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateEmployee", ReplyAction="http://tempuri.org/IBankService/UpdateEmployeeResponse")]
        System.Threading.Tasks.Task UpdateEmployeeAsync(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveEmployee", ReplyAction="http://tempuri.org/IBankService/RemoveEmployeeResponse")]
        void RemoveEmployee(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveEmployee", ReplyAction="http://tempuri.org/IBankService/RemoveEmployeeResponse")]
        System.Threading.Tasks.Task RemoveEmployeeAsync(WebClient.BankService.Employee employee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetEmployeeByLogin", ReplyAction="http://tempuri.org/IBankService/GetEmployeeByLoginResponse")]
        WebClient.BankService.Employee GetEmployeeByLogin(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetEmployeeByLogin", ReplyAction="http://tempuri.org/IBankService/GetEmployeeByLoginResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee> GetEmployeeByLoginAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllAdminEmployees", ReplyAction="http://tempuri.org/IBankService/GetAllAdminEmployeesResponse")]
        WebClient.BankService.Employee[] GetAllAdminEmployees();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllAdminEmployees", ReplyAction="http://tempuri.org/IBankService/GetAllAdminEmployeesResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetAllAdminEmployeesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetArbitraryTransactionById", ReplyAction="http://tempuri.org/IBankService/GetArbitraryTransactionByIdResponse")]
        WebClient.BankService.ArbitraryTransaction GetArbitraryTransactionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetArbitraryTransactionById", ReplyAction="http://tempuri.org/IBankService/GetArbitraryTransactionByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction> GetArbitraryTransactionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllArbitraryTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllArbitraryTransactionsResponse")]
        WebClient.BankService.ArbitraryTransaction[] GetAllArbitraryTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllArbitraryTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllArbitraryTransactionsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction[]> GetAllArbitraryTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/AddArbitraryTransactionResponse")]
        void AddArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/AddArbitraryTransactionResponse")]
        System.Threading.Tasks.Task AddArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateArbitraryTransactionResponse")]
        void UpdateArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateArbitraryTransactionResponse")]
        System.Threading.Tasks.Task UpdateArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveArbitraryTransactionResponse")]
        void RemoveArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveArbitraryTransactionResponse")]
        System.Threading.Tasks.Task RemoveArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/CreateArbitraryTransactionResponse")]
        bool CreateArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateArbitraryTransaction", ReplyAction="http://tempuri.org/IBankService/CreateArbitraryTransactionResponse")]
        System.Threading.Tasks.Task<bool> CreateArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetMobileTransactionById", ReplyAction="http://tempuri.org/IBankService/GetMobileTransactionByIdResponse")]
        WebClient.BankService.MobileTransaction GetMobileTransactionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetMobileTransactionById", ReplyAction="http://tempuri.org/IBankService/GetMobileTransactionByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction> GetMobileTransactionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllMobileTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllMobileTransactionsResponse")]
        WebClient.BankService.MobileTransaction[] GetAllMobileTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllMobileTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllMobileTransactionsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction[]> GetAllMobileTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddMobileTransaction", ReplyAction="http://tempuri.org/IBankService/AddMobileTransactionResponse")]
        void AddMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddMobileTransaction", ReplyAction="http://tempuri.org/IBankService/AddMobileTransactionResponse")]
        System.Threading.Tasks.Task AddMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateMobileTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateMobileTransactionResponse")]
        void UpdateMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateMobileTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateMobileTransactionResponse")]
        System.Threading.Tasks.Task UpdateMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveMobileTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveMobileTransactionResponse")]
        void RemoveMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveMobileTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveMobileTransactionResponse")]
        System.Threading.Tasks.Task RemoveMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateMobileTransaction", ReplyAction="http://tempuri.org/IBankService/CreateMobileTransactionResponse")]
        bool CreateMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateMobileTransaction", ReplyAction="http://tempuri.org/IBankService/CreateMobileTransactionResponse")]
        System.Threading.Tasks.Task<bool> CreateMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetTransferTransactionById", ReplyAction="http://tempuri.org/IBankService/GetTransferTransactionByIdResponse")]
        WebClient.BankService.TransferTransaction GetTransferTransactionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetTransferTransactionById", ReplyAction="http://tempuri.org/IBankService/GetTransferTransactionByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction> GetTransferTransactionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllTransferTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllTransferTransactionsResponse")]
        WebClient.BankService.TransferTransaction[] GetAllTransferTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllTransferTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllTransferTransactionsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction[]> GetAllTransferTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddTransferTransaction", ReplyAction="http://tempuri.org/IBankService/AddTransferTransactionResponse")]
        void AddTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddTransferTransaction", ReplyAction="http://tempuri.org/IBankService/AddTransferTransactionResponse")]
        System.Threading.Tasks.Task AddTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateTransferTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateTransferTransactionResponse")]
        void UpdateTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateTransferTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateTransferTransactionResponse")]
        System.Threading.Tasks.Task UpdateTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveTransferTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveTransferTransactionResponse")]
        void RemoveTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveTransferTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveTransferTransactionResponse")]
        System.Threading.Tasks.Task RemoveTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateTransferTransaction", ReplyAction="http://tempuri.org/IBankService/CreateTransferTransactionResponse")]
        bool CreateTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateTransferTransaction", ReplyAction="http://tempuri.org/IBankService/CreateTransferTransactionResponse")]
        System.Threading.Tasks.Task<bool> CreateTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetSSISTransactionById", ReplyAction="http://tempuri.org/IBankService/GetSSISTransactionByIdResponse")]
        WebClient.BankService.SSISTransaction GetSSISTransactionById(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetSSISTransactionById", ReplyAction="http://tempuri.org/IBankService/GetSSISTransactionByIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction> GetSSISTransactionByIdAsync(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllSSISTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllSSISTransactionsResponse")]
        WebClient.BankService.SSISTransaction[] GetAllSSISTransactions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetAllSSISTransactions", ReplyAction="http://tempuri.org/IBankService/GetAllSSISTransactionsResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction[]> GetAllSSISTransactionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddSSISTransaction", ReplyAction="http://tempuri.org/IBankService/AddSSISTransactionResponse")]
        void AddSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/AddSSISTransaction", ReplyAction="http://tempuri.org/IBankService/AddSSISTransactionResponse")]
        System.Threading.Tasks.Task AddSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateSSISTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateSSISTransactionResponse")]
        void UpdateSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/UpdateSSISTransaction", ReplyAction="http://tempuri.org/IBankService/UpdateSSISTransactionResponse")]
        System.Threading.Tasks.Task UpdateSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveSSISTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveSSISTransactionResponse")]
        void RemoveSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/RemoveSSISTransaction", ReplyAction="http://tempuri.org/IBankService/RemoveSSISTransactionResponse")]
        System.Threading.Tasks.Task RemoveSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateSSISTransaction", ReplyAction="http://tempuri.org/IBankService/CreateSSISTransactionResponse")]
        bool CreateSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/CreateSSISTransaction", ReplyAction="http://tempuri.org/IBankService/CreateSSISTransactionResponse")]
        System.Threading.Tasks.Task<bool> CreateSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetArbitraryTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetArbitraryTransactionsByCardIdResponse")]
        WebClient.BankService.ArbitraryTransaction[] GetArbitraryTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetArbitraryTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetArbitraryTransactionsByCardIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction[]> GetArbitraryTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetMobileTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetMobileTransactionsByCardIdResponse")]
        WebClient.BankService.MobileTransaction[] GetMobileTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetMobileTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetMobileTransactionsByCardIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction[]> GetMobileTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetSSISTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetSSISTransactionsByCardIdResponse")]
        WebClient.BankService.SSISTransaction[] GetSSISTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetSSISTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetSSISTransactionsByCardIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction[]> GetSSISTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetTransferTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetTransferTransactionsByCardIdResponse")]
        WebClient.BankService.TransferTransaction[] GetTransferTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBankService/GetTransferTransactionsByCardId", ReplyAction="http://tempuri.org/IBankService/GetTransferTransactionsByCardIdResponse")]
        System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction[]> GetTransferTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBankServiceChannel : WebClient.BankService.IBankService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BankServiceClient : System.ServiceModel.ClientBase<WebClient.BankService.IBankService>, WebClient.BankService.IBankService {
        
        public BankServiceClient() {
        }
        
        public BankServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BankServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BankServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebClient.BankService.BankAccount GetBankAccountById(int Id) {
            return base.Channel.GetBankAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.BankAccount> GetBankAccountByIdAsync(int Id) {
            return base.Channel.GetBankAccountByIdAsync(Id);
        }
        
        public WebClient.BankService.BankAccount GetBankAccountByNumber(string number) {
            return base.Channel.GetBankAccountByNumber(number);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.BankAccount> GetBankAccountByNumberAsync(string number) {
            return base.Channel.GetBankAccountByNumberAsync(number);
        }
        
        public WebClient.BankService.BankAccount[] GetAllBankAccounts() {
            return base.Channel.GetAllBankAccounts();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetAllBankAccountsAsync() {
            return base.Channel.GetAllBankAccountsAsync();
        }
        
        public void AddBankAccount(WebClient.BankService.BankAccount bankAccount) {
            base.Channel.AddBankAccount(bankAccount);
        }
        
        public System.Threading.Tasks.Task AddBankAccountAsync(WebClient.BankService.BankAccount bankAccount) {
            return base.Channel.AddBankAccountAsync(bankAccount);
        }
        
        public void UpdateBankAccount(WebClient.BankService.BankAccount bankAccount) {
            base.Channel.UpdateBankAccount(bankAccount);
        }
        
        public System.Threading.Tasks.Task UpdateBankAccountAsync(WebClient.BankService.BankAccount bankAccount) {
            return base.Channel.UpdateBankAccountAsync(bankAccount);
        }
        
        public void RemoveBankAccount(WebClient.BankService.BankAccount bankAccount) {
            base.Channel.RemoveBankAccount(bankAccount);
        }
        
        public System.Threading.Tasks.Task RemoveBankAccountAsync(WebClient.BankService.BankAccount bankAccount) {
            return base.Channel.RemoveBankAccountAsync(bankAccount);
        }
        
        public double GetBankAccountBalance(int bankAccountId) {
            return base.Channel.GetBankAccountBalance(bankAccountId);
        }
        
        public System.Threading.Tasks.Task<double> GetBankAccountBalanceAsync(int bankAccountId) {
            return base.Channel.GetBankAccountBalanceAsync(bankAccountId);
        }
        
        public WebClient.BankService.BankAccount[] GetNextBankAccounts(int lastElementId, int ammount) {
            return base.Channel.GetNextBankAccounts(lastElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetNextBankAccountsAsync(int lastElementId, int ammount) {
            return base.Channel.GetNextBankAccountsAsync(lastElementId, ammount);
        }
        
        public WebClient.BankService.BankAccount[] GetPrevBankAccounts(int firstElementId, int ammount) {
            return base.Channel.GetPrevBankAccounts(firstElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.BankAccount[]> GetPrevBankAccountsAsync(int firstElementId, int ammount) {
            return base.Channel.GetPrevBankAccountsAsync(firstElementId, ammount);
        }
        
        public WebClient.BankService.CardAccount[] GetNextCardAccounts(int lastElementId, int ammount) {
            return base.Channel.GetNextCardAccounts(lastElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetNextCardAccountsAsync(int lastElementId, int ammount) {
            return base.Channel.GetNextCardAccountsAsync(lastElementId, ammount);
        }
        
        public WebClient.BankService.CardAccount[] GetPrevCardAccounts(int firstElementId, int ammount) {
            return base.Channel.GetPrevCardAccounts(firstElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetPrevCardAccountsAsync(int firstElementId, int ammount) {
            return base.Channel.GetPrevCardAccountsAsync(firstElementId, ammount);
        }
        
        public WebClient.BankService.Employee[] GetNextOperators(int lastElementId, int ammount) {
            return base.Channel.GetNextOperators(lastElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetNextOperatorsAsync(int lastElementId, int ammount) {
            return base.Channel.GetNextOperatorsAsync(lastElementId, ammount);
        }
        
        public WebClient.BankService.Employee[] GetPrevOperators(int firstElementId, int ammount) {
            return base.Channel.GetPrevOperators(firstElementId, ammount);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetPrevOperatorsAsync(int firstElementId, int ammount) {
            return base.Channel.GetPrevOperatorsAsync(firstElementId, ammount);
        }
        
        public WebClient.BankService.CardAccount GetCardAccountById(int Id) {
            return base.Channel.GetCardAccountById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount> GetCardAccountByIdAsync(int Id) {
            return base.Channel.GetCardAccountByIdAsync(Id);
        }
        
        public WebClient.BankService.CardAccount GetCardAccountByNumber(string number) {
            return base.Channel.GetCardAccountByNumber(number);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount> GetCardAccountByNumberAsync(string number) {
            return base.Channel.GetCardAccountByNumberAsync(number);
        }
        
        public WebClient.BankService.CardAccount[] GetAllCardAccounts() {
            return base.Channel.GetAllCardAccounts();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetAllCardAccountsAsync() {
            return base.Channel.GetAllCardAccountsAsync();
        }
        
        public WebClient.BankService.CardAccount[] GetCardAccountsByCustomerId(int customerId) {
            return base.Channel.GetCardAccountsByCustomerId(customerId);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.CardAccount[]> GetCardAccountsByCustomerIdAsync(int customerId) {
            return base.Channel.GetCardAccountsByCustomerIdAsync(customerId);
        }
        
        public void AddCardAccount(WebClient.BankService.CardAccount cardAccount) {
            base.Channel.AddCardAccount(cardAccount);
        }
        
        public System.Threading.Tasks.Task AddCardAccountAsync(WebClient.BankService.CardAccount cardAccount) {
            return base.Channel.AddCardAccountAsync(cardAccount);
        }
        
        public void UpdateCardAccount(WebClient.BankService.CardAccount cardAccount) {
            base.Channel.UpdateCardAccount(cardAccount);
        }
        
        public System.Threading.Tasks.Task UpdateCardAccountAsync(WebClient.BankService.CardAccount cardAccount) {
            return base.Channel.UpdateCardAccountAsync(cardAccount);
        }
        
        public void RemoveCardAccount(WebClient.BankService.CardAccount cardAccount) {
            base.Channel.RemoveCardAccount(cardAccount);
        }
        
        public System.Threading.Tasks.Task RemoveCardAccountAsync(WebClient.BankService.CardAccount cardAccount) {
            return base.Channel.RemoveCardAccountAsync(cardAccount);
        }
        
        public bool IsEnoughBalance(int cardAccountId, double amount) {
            return base.Channel.IsEnoughBalance(cardAccountId, amount);
        }
        
        public System.Threading.Tasks.Task<bool> IsEnoughBalanceAsync(int cardAccountId, double amount) {
            return base.Channel.IsEnoughBalanceAsync(cardAccountId, amount);
        }
        
        public WebClient.BankService.Currency GetCurrencyById(int Id) {
            return base.Channel.GetCurrencyById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Currency> GetCurrencyByIdAsync(int Id) {
            return base.Channel.GetCurrencyByIdAsync(Id);
        }
        
        public WebClient.BankService.Currency[] GetAllCurrency() {
            return base.Channel.GetAllCurrency();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Currency[]> GetAllCurrencyAsync() {
            return base.Channel.GetAllCurrencyAsync();
        }
        
        public void AddCurrency(WebClient.BankService.Currency currency) {
            base.Channel.AddCurrency(currency);
        }
        
        public System.Threading.Tasks.Task AddCurrencyAsync(WebClient.BankService.Currency currency) {
            return base.Channel.AddCurrencyAsync(currency);
        }
        
        public void UpdateCurrency(WebClient.BankService.Currency currency) {
            base.Channel.UpdateCurrency(currency);
        }
        
        public System.Threading.Tasks.Task UpdateCurrencyAsync(WebClient.BankService.Currency currency) {
            return base.Channel.UpdateCurrencyAsync(currency);
        }
        
        public void RemoveCurrency(WebClient.BankService.Currency currency) {
            base.Channel.RemoveCurrency(currency);
        }
        
        public System.Threading.Tasks.Task RemoveCurrencyAsync(WebClient.BankService.Currency currency) {
            return base.Channel.RemoveCurrencyAsync(currency);
        }
        
        public void RemoveAllCurrency() {
            base.Channel.RemoveAllCurrency();
        }
        
        public System.Threading.Tasks.Task RemoveAllCurrencyAsync() {
            return base.Channel.RemoveAllCurrencyAsync();
        }
        
        public string GetBankAccountCurrencyShortString(int bankAccountId) {
            return base.Channel.GetBankAccountCurrencyShortString(bankAccountId);
        }
        
        public System.Threading.Tasks.Task<string> GetBankAccountCurrencyShortStringAsync(int bankAccountId) {
            return base.Channel.GetBankAccountCurrencyShortStringAsync(bankAccountId);
        }
        
        public WebClient.BankService.Employee GetEmployeeById(int Id) {
            return base.Channel.GetEmployeeById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee> GetEmployeeByIdAsync(int Id) {
            return base.Channel.GetEmployeeByIdAsync(Id);
        }
        
        public WebClient.BankService.Employee[] GetAllEmployees() {
            return base.Channel.GetAllEmployees();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetAllEmployeesAsync() {
            return base.Channel.GetAllEmployeesAsync();
        }
        
        public void AddEmployee(WebClient.BankService.Employee employee) {
            base.Channel.AddEmployee(employee);
        }
        
        public System.Threading.Tasks.Task AddEmployeeAsync(WebClient.BankService.Employee employee) {
            return base.Channel.AddEmployeeAsync(employee);
        }
        
        public void UpdateEmployee(WebClient.BankService.Employee employee) {
            base.Channel.UpdateEmployee(employee);
        }
        
        public System.Threading.Tasks.Task UpdateEmployeeAsync(WebClient.BankService.Employee employee) {
            return base.Channel.UpdateEmployeeAsync(employee);
        }
        
        public void RemoveEmployee(WebClient.BankService.Employee employee) {
            base.Channel.RemoveEmployee(employee);
        }
        
        public System.Threading.Tasks.Task RemoveEmployeeAsync(WebClient.BankService.Employee employee) {
            return base.Channel.RemoveEmployeeAsync(employee);
        }
        
        public WebClient.BankService.Employee GetEmployeeByLogin(string login) {
            return base.Channel.GetEmployeeByLogin(login);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee> GetEmployeeByLoginAsync(string login) {
            return base.Channel.GetEmployeeByLoginAsync(login);
        }
        
        public WebClient.BankService.Employee[] GetAllAdminEmployees() {
            return base.Channel.GetAllAdminEmployees();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.Employee[]> GetAllAdminEmployeesAsync() {
            return base.Channel.GetAllAdminEmployeesAsync();
        }
        
        public WebClient.BankService.ArbitraryTransaction GetArbitraryTransactionById(int Id) {
            return base.Channel.GetArbitraryTransactionById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction> GetArbitraryTransactionByIdAsync(int Id) {
            return base.Channel.GetArbitraryTransactionByIdAsync(Id);
        }
        
        public WebClient.BankService.ArbitraryTransaction[] GetAllArbitraryTransactions() {
            return base.Channel.GetAllArbitraryTransactions();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction[]> GetAllArbitraryTransactionsAsync() {
            return base.Channel.GetAllArbitraryTransactionsAsync();
        }
        
        public void AddArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            base.Channel.AddArbitraryTransaction(arbitraryTransaction);
        }
        
        public System.Threading.Tasks.Task AddArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            return base.Channel.AddArbitraryTransactionAsync(arbitraryTransaction);
        }
        
        public void UpdateArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            base.Channel.UpdateArbitraryTransaction(arbitraryTransaction);
        }
        
        public System.Threading.Tasks.Task UpdateArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            return base.Channel.UpdateArbitraryTransactionAsync(arbitraryTransaction);
        }
        
        public void RemoveArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            base.Channel.RemoveArbitraryTransaction(arbitraryTransaction);
        }
        
        public System.Threading.Tasks.Task RemoveArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            return base.Channel.RemoveArbitraryTransactionAsync(arbitraryTransaction);
        }
        
        public bool CreateArbitraryTransaction(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            return base.Channel.CreateArbitraryTransaction(arbitraryTransaction);
        }
        
        public System.Threading.Tasks.Task<bool> CreateArbitraryTransactionAsync(WebClient.BankService.ArbitraryTransaction arbitraryTransaction) {
            return base.Channel.CreateArbitraryTransactionAsync(arbitraryTransaction);
        }
        
        public WebClient.BankService.MobileTransaction GetMobileTransactionById(int Id) {
            return base.Channel.GetMobileTransactionById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction> GetMobileTransactionByIdAsync(int Id) {
            return base.Channel.GetMobileTransactionByIdAsync(Id);
        }
        
        public WebClient.BankService.MobileTransaction[] GetAllMobileTransactions() {
            return base.Channel.GetAllMobileTransactions();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction[]> GetAllMobileTransactionsAsync() {
            return base.Channel.GetAllMobileTransactionsAsync();
        }
        
        public void AddMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction) {
            base.Channel.AddMobileTransaction(mobileTransaction);
        }
        
        public System.Threading.Tasks.Task AddMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction) {
            return base.Channel.AddMobileTransactionAsync(mobileTransaction);
        }
        
        public void UpdateMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction) {
            base.Channel.UpdateMobileTransaction(mobileTransaction);
        }
        
        public System.Threading.Tasks.Task UpdateMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction) {
            return base.Channel.UpdateMobileTransactionAsync(mobileTransaction);
        }
        
        public void RemoveMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction) {
            base.Channel.RemoveMobileTransaction(mobileTransaction);
        }
        
        public System.Threading.Tasks.Task RemoveMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction) {
            return base.Channel.RemoveMobileTransactionAsync(mobileTransaction);
        }
        
        public bool CreateMobileTransaction(WebClient.BankService.MobileTransaction mobileTransaction) {
            return base.Channel.CreateMobileTransaction(mobileTransaction);
        }
        
        public System.Threading.Tasks.Task<bool> CreateMobileTransactionAsync(WebClient.BankService.MobileTransaction mobileTransaction) {
            return base.Channel.CreateMobileTransactionAsync(mobileTransaction);
        }
        
        public WebClient.BankService.TransferTransaction GetTransferTransactionById(int Id) {
            return base.Channel.GetTransferTransactionById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction> GetTransferTransactionByIdAsync(int Id) {
            return base.Channel.GetTransferTransactionByIdAsync(Id);
        }
        
        public WebClient.BankService.TransferTransaction[] GetAllTransferTransactions() {
            return base.Channel.GetAllTransferTransactions();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction[]> GetAllTransferTransactionsAsync() {
            return base.Channel.GetAllTransferTransactionsAsync();
        }
        
        public void AddTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction) {
            base.Channel.AddTransferTransaction(transferTransaction);
        }
        
        public System.Threading.Tasks.Task AddTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction) {
            return base.Channel.AddTransferTransactionAsync(transferTransaction);
        }
        
        public void UpdateTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction) {
            base.Channel.UpdateTransferTransaction(transferTransaction);
        }
        
        public System.Threading.Tasks.Task UpdateTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction) {
            return base.Channel.UpdateTransferTransactionAsync(transferTransaction);
        }
        
        public void RemoveTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction) {
            base.Channel.RemoveTransferTransaction(transferTransaction);
        }
        
        public System.Threading.Tasks.Task RemoveTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction) {
            return base.Channel.RemoveTransferTransactionAsync(transferTransaction);
        }
        
        public bool CreateTransferTransaction(WebClient.BankService.TransferTransaction transferTransaction) {
            return base.Channel.CreateTransferTransaction(transferTransaction);
        }
        
        public System.Threading.Tasks.Task<bool> CreateTransferTransactionAsync(WebClient.BankService.TransferTransaction transferTransaction) {
            return base.Channel.CreateTransferTransactionAsync(transferTransaction);
        }
        
        public WebClient.BankService.SSISTransaction GetSSISTransactionById(int Id) {
            return base.Channel.GetSSISTransactionById(Id);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction> GetSSISTransactionByIdAsync(int Id) {
            return base.Channel.GetSSISTransactionByIdAsync(Id);
        }
        
        public WebClient.BankService.SSISTransaction[] GetAllSSISTransactions() {
            return base.Channel.GetAllSSISTransactions();
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction[]> GetAllSSISTransactionsAsync() {
            return base.Channel.GetAllSSISTransactionsAsync();
        }
        
        public void AddSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction) {
            base.Channel.AddSSISTransaction(SSISTransaction);
        }
        
        public System.Threading.Tasks.Task AddSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction) {
            return base.Channel.AddSSISTransactionAsync(SSISTransaction);
        }
        
        public void UpdateSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction) {
            base.Channel.UpdateSSISTransaction(SSISTransaction);
        }
        
        public System.Threading.Tasks.Task UpdateSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction) {
            return base.Channel.UpdateSSISTransactionAsync(SSISTransaction);
        }
        
        public void RemoveSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction) {
            base.Channel.RemoveSSISTransaction(SSISTransaction);
        }
        
        public System.Threading.Tasks.Task RemoveSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction) {
            return base.Channel.RemoveSSISTransactionAsync(SSISTransaction);
        }
        
        public bool CreateSSISTransaction(WebClient.BankService.SSISTransaction SSISTransaction) {
            return base.Channel.CreateSSISTransaction(SSISTransaction);
        }
        
        public System.Threading.Tasks.Task<bool> CreateSSISTransactionAsync(WebClient.BankService.SSISTransaction SSISTransaction) {
            return base.Channel.CreateSSISTransactionAsync(SSISTransaction);
        }
        
        public WebClient.BankService.ArbitraryTransaction[] GetArbitraryTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetArbitraryTransactionsByCardId(cardId, from, to);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.ArbitraryTransaction[]> GetArbitraryTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetArbitraryTransactionsByCardIdAsync(cardId, from, to);
        }
        
        public WebClient.BankService.MobileTransaction[] GetMobileTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetMobileTransactionsByCardId(cardId, from, to);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.MobileTransaction[]> GetMobileTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetMobileTransactionsByCardIdAsync(cardId, from, to);
        }
        
        public WebClient.BankService.SSISTransaction[] GetSSISTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetSSISTransactionsByCardId(cardId, from, to);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.SSISTransaction[]> GetSSISTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetSSISTransactionsByCardIdAsync(cardId, from, to);
        }
        
        public WebClient.BankService.TransferTransaction[] GetTransferTransactionsByCardId(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetTransferTransactionsByCardId(cardId, from, to);
        }
        
        public System.Threading.Tasks.Task<WebClient.BankService.TransferTransaction[]> GetTransferTransactionsByCardIdAsync(int cardId, System.DateTime from, System.DateTime to) {
            return base.Channel.GetTransferTransactionsByCardIdAsync(cardId, from, to);
        }
    }
}
